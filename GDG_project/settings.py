# """
# Django settings for GDG_project project.
#
# Generated by 'django-admin startproject' using Django 5.2.4.
#
# For more information on this file, see
# https://docs.djangoproject.com/en/5.2/topics/settings/
#
# For the full list of settings and their values, see
# https://docs.djangoproject.com/en/5.2/ref/settings/
# """
# import os
# from pathlib import Path
#
# # Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent
#
#
# # Quick-start development settings - unsuitable for production
# # See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/
#
# # SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-h=7q8a_q1l3@-)9byt1kjm1qr*a1hp_ila_#+*4hex&^6vu+aw'
#
# # SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
#
# ALLOWED_HOSTS = ['.vercel.app', 'localhost', '127.0.0.1']
#
# AUTHENTICATION_BACKENDS = [
#     'django.contrib.auth.backends.ModelBackend',
# ]
#
#
# # Application definition
#
# INSTALLED_APPS = [
#     'django.contrib.admin',
#     'django.contrib.auth',
#     'django.contrib.contenttypes',
#     'django.contrib.sessions',
#     'django.contrib.messages',
#     'django.contrib.staticfiles',
#     'users',
#     'events',
#     'attendence',
#     'gdg_tasks',
#     'infra_issues',
#     'performance',
#     'ai_assistant',
#     'dashboard',
# ]
# MIDDLEWARE = [
#     'django.middleware.security.SecurityMiddleware',
#     'whitenoise.middleware.WhiteNoiseMiddleware',
#     'django.contrib.sessions.middleware.SessionMiddleware',
#     'django.contrib.auth.middleware.AuthenticationMiddleware',
#
#     'GDG_project.middleware.FakeLoginMiddleware',
#
#     'django.middleware.common.CommonMiddleware',
#     'django.middleware.csrf.CsrfViewMiddleware',
#     'django.contrib.messages.middleware.MessageMiddleware',
#     'django.middleware.clickjacking.XFrameOptionsMiddleware',
# ]
#
#
# # settings.py
# import os
#
# if os.environ.get("ENV") == "development":
#     MIDDLEWARE.insert(
#         MIDDLEWARE.index('django.contrib.auth.middleware.AuthenticationMiddleware') + 1,
#         'GDG_project.middleware.FakeLoginMiddleware'
#     )
#
#
#
#
#
#
# STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
#
# ROOT_URLCONF = 'GDG_project.urls'
#
# TEMPLATES = [
#     {
#         'BACKEND': 'django.template.backends.django.DjangoTemplates',
#         'DIRS': [BASE_DIR / 'templates']
#         ,
#         'APP_DIRS': True,
#         'OPTIONS': {
#             'context_processors': [
#                 'django.template.context_processors.request',
#                 'django.contrib.auth.context_processors.auth',
#                 'django.contrib.messages.context_processors.messages',
#             ],
#         },
#     },
# ]
#
# WSGI_APPLICATION = 'GDG_project.wsgi.application'
#
#
# # Database
# # https://docs.djangoproject.com/en/5.2/ref/settings/#databases
#
# import os
# from pathlib import Path
#
# BASE_DIR = Path(__file__).resolve().parent.parent
#
#
#
# import os
# from dotenv import load_dotenv
# load_dotenv()
#
#
#
#
#
# # Password validation
# # https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
#
# AUTH_PASSWORD_VALIDATORS = [
#     {
#         'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
#     },
# ]
#
#
# # Internationalization
# # https://docs.djangoproject.com/en/5.2/topics/i18n/
#
# LANGUAGE_CODE = 'en-us'
#
# TIME_ZONE = 'Asia/Kolkata'
#
# USE_I18N = True
#
# USE_TZ = True
#
#
# # Static files (CSS, JavaScript, Images)
# # https://docs.djangoproject.com/en/5.2/howto/static-files/
#
#
#
# # Default primary key field type
# # https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
#
# DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
#
# AUTH_USER_MODEL = 'users.User'
#
# import os
#
# MEDIA_URL = '/media/'
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
#
#
#
#
# import os
# from dotenv import load_dotenv
# load_dotenv()
#
# GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
#
#
#
# LOGIN_REDIRECT_URL = '/dashboard/'  # Where to go after login
# LOGIN_URL = '/accounts/login/'      # Where to go if login is required
#
# import os
#
# STATIC_URL = '/static/'
# STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]  # Your custom static folder
# STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")    # Where collectstatic will place files
#
#
#
#
#
# from dotenv import load_dotenv
# load_dotenv()
#
# # GDG_project/settings.py
#
# import os
# import dj_database_url
#
# DATABASES = {
#     'default': dj_database_url.config(
#         default=os.environ.get('DATABASE_URL'),
#         conn_max_age=600,
#     )
# }

# GDG_project/settings.py
# from dotenv import load_dotenv
# import os
#
# load_dotenv()
#
#
#
#
#
# import os
# from pathlib import Path
# import dj_database_url
#
#
#
#
#
# # Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent
#
# # Quick-start development settings
# SECRET_KEY = os.getenv("SECRET_KEY", 'django-insecure-h=7q8a_q1l3@-)9byt1kjm1qr*a1hp_ila_#+*4hex&^6vu+aw')
# DEBUG = os.getenv("DEBUG", "True") == "True"
# ALLOWED_HOSTS = ['.vercel.app', 'localhost', '127.0.0.1']
#
# # Application definition
# INSTALLED_APPS = [
#     'django.contrib.admin',
#     'django.contrib.auth',
#     'django.contrib.contenttypes',
#     'django.contrib.sessions',
#     'django.contrib.messages',
#     'django.contrib.staticfiles',
#     'users',
#     'events',
#     'attendence',
#     'gdg_tasks',
#     'infra_issues',
#     'performance',
#     'ai_assistant',
#     'dashboard',
# ]
#
# MIDDLEWARE = [
#     'django.middleware.security.SecurityMiddleware',
#     'whitenoise.middleware.WhiteNoiseMiddleware',
#     'django.contrib.sessions.middleware.SessionMiddleware',
#     'django.contrib.auth.middleware.AuthenticationMiddleware',
#     'django.middleware.common.CommonMiddleware',
#     'django.middleware.csrf.CsrfViewMiddleware',
#     'django.contrib.messages.middleware.MessageMiddleware',
#     'django.middleware.clickjacking.XFrameOptionsMiddleware',
#     'users.middleware.AutoLoginAsDemoUserMiddleware',
#
#
# ]
#
# if os.getenv("ENV") == "development":
#     MIDDLEWARE.insert(
#         MIDDLEWARE.index('django.contrib.auth.middleware.AuthenticationMiddleware') + 1,
#         'GDG_project.middleware.FakeLoginMiddleware'
#     )
#
# ROOT_URLCONF = 'GDG_project.urls'
#
# TEMPLATES = [
#     {
#         'BACKEND': 'django.template.backends.django.DjangoTemplates',
#         'DIRS': [BASE_DIR / 'templates'],
#         'APP_DIRS': True,
#         'OPTIONS': {
#             'context_processors': [
#                 'django.template.context_processors.request',
#                 'django.contrib.auth.context_processors.auth',
#                 'django.contrib.messages.context_processors.messages',
#             ],
#         },
#     },
# ]
#
# WSGI_APPLICATION = 'GDG_project.wsgi.application'
#
# import dj_database_url
# import os
#
# DATABASE_URL = os.getenv('DATABASE_URL')
#
# if DATABASE_URL:
#
#
#     DATABASES = {
#         'default': dj_database_url.parse(DATABASE_URL)
#     }
# else:
#     print("⚠️ WARNING: No DATABASE_URL found. Using SQLite fallback.")
#     DATABASES = {
#         'default': {
#             'ENGINE': 'django.db.backends.sqlite3',
#             'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#         }
#     }
#
#
#
#
# # Password validation
# AUTH_PASSWORD_VALIDATORS = [
#     {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
#     {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
#     {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
#     {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
# ]
#
# # Internationalization
# LANGUAGE_CODE = 'en-us'
# TIME_ZONE = 'Asia/Kolkata'
# USE_I18N = True
# USE_TZ = True
#
# # Static files (CSS, JavaScript, Images)
# STATIC_URL = '/static/'
# STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]
# STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles_build") # Use 'staticfiles_build' to match vercel.json
# STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
#
# # Media files
# MEDIA_URL = '/media/'
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
#
# # Default primary key field type
# DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
# AUTH_USER_MODEL = 'users.User'
#
# # Other settings
# GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
# LOGIN_REDIRECT_URL = '/dashboard/'
# LOGIN_URL = '/accounts/login/'
#
# # --- NEW DATABASE CONFIGURATION ---
# # PASTE YOUR NEON URL between the quotes
# NEON_URL = "postgresql://neondb_owner:npg_AQiqbmwG9Ij0@ep-shy-hill-adidebm8-pooler.c-2.us-east-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require"
#
# DATABASES = {
#     'default': dj_database_url.config(
#         default=NEON_URL,
#         conn_max_age=600
#     )
# }
from pathlib import Path
import os
from dotenv import load_dotenv
import dj_database_url

# Load environment variables from .env
load_dotenv()

# Base directory
BASE_DIR = Path(__file__).resolve().parent.parent

# Security
SECRET_KEY = os.getenv("SECRET_KEY", 'django-insecure-fallback-key')
DEBUG = os.getenv("DEBUG", "True") == "True"
ALLOWED_HOSTS = ['.vercel.app', 'localhost', '127.0.0.1']

# Applications
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Custom apps
    'users',
    'events',
    'attendence',
    'gdg_tasks',
    'infra_issues',
    'performance',
    'ai_assistant',
    'dashboard',
]

# Middleware
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'users.middleware.AutoLoginAsDemoUserMiddleware',
]

# Dev-only middleware
if os.getenv("ENV") == "development":
    MIDDLEWARE.insert(
        MIDDLEWARE.index('django.contrib.auth.middleware.AuthenticationMiddleware') + 1,
        'GDG_project.middleware.FakeLoginMiddleware'
    )

# URLs
ROOT_URLCONF = 'GDG_project.urls'

# Templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI
WSGI_APPLICATION = 'GDG_project.wsgi.application'

# 🔥 Database configuration from .env
DATABASE_URL = os.getenv('DATABASE_URL')

if not DATABASE_URL:
    raise ValueError("❌ DATABASE_URL is not set in your environment or .env file.")

DATABASES = {
    'default': dj_database_url.parse(DATABASE_URL, conn_max_age=600)
}

# Auth
AUTH_USER_MODEL = 'users.User'
LOGIN_REDIRECT_URL = '/dashboard/'
LOGIN_URL = '/accounts/login/'

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Timezone and language
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Asia/Kolkata'
USE_I18N = True
USE_TZ = True

# Static files
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles_build")  # For Vercel
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Google API Key
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
print("Vercel DEBUG - DATABASE_URL =", repr(os.environ.get("DATABASE_URL")))
